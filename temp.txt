
    var renderingContext = new RenderContext(context);

    var rows = new Array<RowDefinition>(
        new ColumnDefinition(500),
        new ColumnDefinition(250),
        new ColumnDefinition(125),
        new ColumnDefinition(125)
    );

    var columns = new Array<ColumnDefinition>(
        new ColumnDefinition(250),
        new ColumnDefinition(250),
        new ColumnDefinition(250),
        new ColumnDefinition(250)
    );

    /*

    function StampCell(object?: Renderable, top?: number, left?: number, right?: number, bottom?: number) {
        return new Cell(new Padding(top, left, right, bottom), object);
    }

    */

    function CreateArrayWithValues(length: number) {
        var start = 0;
        var result = [];
        while (start < length) {
            result.push(start);
            start++;
        }
        return result;
    }
    /*

    var cells = CreateArrayWithValues(rows.length).map(element => {
        return CreateArrayWithValues(columns.length).map(element => {
            return StampCell();
        });
    });

    //console.log(cells);
        var cells = new Array<Array<Cell>>(
            new Array(StampCell(), new Cell(new CheckBox(renderingContext), new Padding(0, 0, 0, 0)), new Cell(), new Cell()),
            new Array(new Cell(new Padding()), new Padding(0, 0, 0, 0)), new Cell(new CheckBox(renderingContext), new Padding(50, 50, 50, 50)), new Cell(new CheckBox(renderingContext), new Padding(0, 0, 0, 0)), new Cell(new CheckBox(renderingContext), new Padding(0, 0, 0, 0))),
            new Array(new Cell(), new Cell(new CheckBox(renderingContext), new Padding(0, 0, 0, 0)), new Cell(), new Cell()),
            new Array(new Cell(), new Cell(), new Cell(), new Cell(new CheckBox(renderingContext), new Padding(0, 0, 0, 0)))
        );
    var main = new GridLayoutManager(renderingContext, canvas.width, canvas.height, new rows, columns, cells);

    var CurrentPage = main;
    */